Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression + expression
Rule 3     expression -> expression - expression
Rule 4     expression -> expression * expression
Rule 5     expression -> expression / expression
Rule 6     statement -> + expression
Rule 7     statement -> - expression
Rule 8     statement -> * expression
Rule 9     statement -> / expression
Rule 10    expression -> ( - expression )
Rule 11    expression -> ( expression )
Rule 12    expression -> NUMBER

Terminals, with rules where they appear

(                    : 10 11
)                    : 10 11
*                    : 4 8
+                    : 2 6
-                    : 3 7 10
/                    : 5 9
NUMBER               : 12
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 4 4 5 5 6 7 8 9 10 11
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (6) statement -> . + expression
    (7) statement -> . - expression
    (8) statement -> . * expression
    (9) statement -> . / expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    +               shift and go to state 3
    -               shift and go to state 4
    *               shift and go to state 5
    /               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 3

    (6) statement -> + . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 13

state 4

    (7) statement -> - . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 14

state 5

    (8) statement -> * . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 15

state 6

    (9) statement -> / . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 16

state 7

    (10) expression -> ( . - expression )
    (11) expression -> ( . expression )
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    -               shift and go to state 17
    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 18

state 8

    (12) expression -> NUMBER .

    +               reduce using rule 12 (expression -> NUMBER .)
    -               reduce using rule 12 (expression -> NUMBER .)
    *               reduce using rule 12 (expression -> NUMBER .)
    /               reduce using rule 12 (expression -> NUMBER .)
    $end            reduce using rule 12 (expression -> NUMBER .)
    )               reduce using rule 12 (expression -> NUMBER .)


state 9

    (2) expression -> expression + . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 19

state 10

    (3) expression -> expression - . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 20

state 11

    (4) expression -> expression * . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 21

state 12

    (5) expression -> expression / . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 22

state 13

    (6) statement -> + expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    $end            reduce using rule 6 (statement -> + expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 14

    (7) statement -> - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    $end            reduce using rule 7 (statement -> - expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 15

    (8) statement -> * expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    $end            reduce using rule 8 (statement -> * expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 16

    (9) statement -> / expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    $end            reduce using rule 9 (statement -> / expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 17

    (10) expression -> ( - . expression )
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (10) expression -> . ( - expression )
    (11) expression -> . ( expression )
    (12) expression -> . NUMBER

    (               shift and go to state 7
    NUMBER          shift and go to state 8

    expression                     shift and go to state 23

state 18

    (11) expression -> ( expression . )
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    )               shift and go to state 24
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 19

    (2) expression -> expression + expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    +               reduce using rule 2 (expression -> expression + expression .)
    -               reduce using rule 2 (expression -> expression + expression .)
    $end            reduce using rule 2 (expression -> expression + expression .)
    )               reduce using rule 2 (expression -> expression + expression .)
    *               shift and go to state 11
    /               shift and go to state 12

  ! *               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]


state 20

    (3) expression -> expression - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    +               reduce using rule 3 (expression -> expression - expression .)
    -               reduce using rule 3 (expression -> expression - expression .)
    $end            reduce using rule 3 (expression -> expression - expression .)
    )               reduce using rule 3 (expression -> expression - expression .)
    *               shift and go to state 11
    /               shift and go to state 12

  ! *               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]


state 21

    (4) expression -> expression * expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    +               reduce using rule 4 (expression -> expression * expression .)
    -               reduce using rule 4 (expression -> expression * expression .)
    *               reduce using rule 4 (expression -> expression * expression .)
    /               reduce using rule 4 (expression -> expression * expression .)
    $end            reduce using rule 4 (expression -> expression * expression .)
    )               reduce using rule 4 (expression -> expression * expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]


state 22

    (5) expression -> expression / expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    +               reduce using rule 5 (expression -> expression / expression .)
    -               reduce using rule 5 (expression -> expression / expression .)
    *               reduce using rule 5 (expression -> expression / expression .)
    /               reduce using rule 5 (expression -> expression / expression .)
    $end            reduce using rule 5 (expression -> expression / expression .)
    )               reduce using rule 5 (expression -> expression / expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]


state 23

    (10) expression -> ( - expression . )
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression

    )               shift and go to state 25
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 24

    (11) expression -> ( expression ) .

    +               reduce using rule 11 (expression -> ( expression ) .)
    -               reduce using rule 11 (expression -> ( expression ) .)
    *               reduce using rule 11 (expression -> ( expression ) .)
    /               reduce using rule 11 (expression -> ( expression ) .)
    $end            reduce using rule 11 (expression -> ( expression ) .)
    )               reduce using rule 11 (expression -> ( expression ) .)


state 25

    (10) expression -> ( - expression ) .

    +               reduce using rule 10 (expression -> ( - expression ) .)
    -               reduce using rule 10 (expression -> ( - expression ) .)
    *               reduce using rule 10 (expression -> ( - expression ) .)
    /               reduce using rule 10 (expression -> ( - expression ) .)
    $end            reduce using rule 10 (expression -> ( - expression ) .)
    )               reduce using rule 10 (expression -> ( - expression ) .)

